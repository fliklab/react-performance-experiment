---
description: 모노레포 프로젝트 요구사항
globs: 
alwaysApply: false
---
# 성능 측정 모노레포 프로젝트 요구사항

## 프로젝트 개요

이 프로젝트는 웹사이트 성능 최적화 전후를 실제로 비교 측정할 수 있는 모노레포 기반 시스템입니다.
Turborepo를 활용하여 동일한 콘텐츠의 최적화 전후 버전을 별도 사이트로 배포하고, 실제 성능 차이를 측정합니다.

## 핵심 기능 요구사항

### 1. 모노레포 구조
- **Turborepo 기반** 모노레포 설계
- **패키지별 독립적 배포** 가능한 구조
- **공통 컴포넌트 및 유틸리티** 패키지 공유
- **일관된 개발 환경** 및 빌드 설정

### 2. 성능 최적화 비교 사이트

#### A. 최적화 전 사이트 (`apps/before`)
- **Client-Side Rendering (CSR)** 방식
- **대용량 번들** - 모든 컴포넌트를 한 번에 로딩
- **즉시 로딩** - 모든 이미지와 리소스를 즉시 로딩
- **기본 상태 관리** - 최적화되지 않은 상태 관리
- **일반적인 데이터 페칭** - 순차적 API 호출

#### B. 최적화 후 사이트 (`apps/after`)
- **Server-Side Rendering (SSR/SSG)** 방식
- **코드 스플리팅** - 필요한 부분만 동적 로딩
- **이미지 최적화** - Next.js Image 컴포넌트 활용
- **지연 로딩** - Intersection Observer 기반
- **캐싱 전략** - SWR/React Query 활용
- **번들 최적화** - Tree shaking, 압축 등

### 3. 테스트 시나리오 콘텐츠

#### A. 대용량 콘텐츠 표시
- **상품 카탈로그** - 수백 개의 상품 목록
- **이미지 갤러리** - 고해상도 이미지 다수
- **긴 목록 데이터** - 무한 스크롤 구현
- **복잡한 테이블** - 정렬, 필터링 기능

#### B. 실시간 콘텐츠
- **라이브 스트리밍 상태** - 실시간 시청자 수, 상태 표시
- **실시간 댓글** - WebSocket 기반 실시간 업데이트
- **라이브 차트** - 실시간 데이터 시각화
- **알림 시스템** - 실시간 푸시 알림

#### C. 복잡한 데이터 페칭
- **다중 API 호출** - 여러 데이터 소스 조합
- **의존성 있는 데이터** - 순차적 데이터 로딩
- **조건부 렌더링** - 사용자 권한에 따른 콘텐츠
- **지역화 데이터** - 다국어 및 지역별 콘텐츠

### 4. 성능 측정 및 모니터링

#### A. 성능 지표 수집
- **Core Web Vitals** - LCP, FID, CLS 측정
- **로딩 시간** - TTFB, FCP, TTI 측정
- **번들 크기** - JavaScript, CSS 번들 크기 분석
- **네트워크 요청** - API 호출 횟수 및 크기

#### B. 실시간 모니터링
- **Vercel Analytics** 통합
- **Google PageSpeed Insights** API 활용
- **커스텀 성능 대시보드** - 비교 시각화
- **자동화된 성능 리포트** - 정기적 성능 측정

## 기술적 요구사항

### 1. 기술 스택
- **모노레포**: Turborepo
- **프론트엔드**: Next.js 14+ (App Router)
- **언어**: TypeScript
- **스타일링**: Tailwind CSS
- **상태관리**: Zustand, SWR/TanStack Query
- **배포**: Vercel
- **패키지 매니저**: pnpm

### 2. 브라우저 호환성
- **모던 브라우저** Chrome, Firefox, Safari, Edge 최신 버전
- **모바일 브라우저** iOS Safari, Chrome Mobile
- **반응형 디자인** - 데스크톱, 태블릿, 모바일 지원

### 3. 성능 목표
- **최적화 전 사이트**
  - LCP: 4초 이상
  - FID: 300ms 이상
  - CLS: 0.25 이상
- **최적화 후 사이트**
  - LCP: 2.5초 이하
  - FID: 100ms 이하
  - CLS: 0.1 이하

## 사용성 요구사항

### 1. 개발자 경험
- **Hot Reload** - 빠른 개발 피드백
- **Type Safety** - 완전한 TypeScript 지원
- **린팅/포매팅** - ESLint, Prettier 설정
- **테스팅** - Jest, Testing Library 환경
- **문서화** - 각 패키지별 README 및 API 문서

### 2. 사용자 경험
- **일관된 UI/UX** - 두 사이트 동일한 디자인
- **접근성** - WCAG 2.1 AA 수준 준수
- **SEO 최적화** - 메타데이터, 구조화된 데이터
- **오프라인 지원** - Service Worker 기반 캐싱

## 확장성 요구사항

### 1. 모듈화 설계
- **공통 컴포넌트 라이브러리** - 재사용 가능한 UI 컴포넌트
- **유틸리티 패키지** - 공통 함수 및 타입 정의
- **설정 패키지** - ESLint, TypeScript, Tailwind 설정 공유
- **플러그인 시스템** - 새로운 최적화 기법 추가 가능

### 2. 테스트 및 CI/CD
- **자동화된 테스트** - 단위 테스트, 통합 테스트, E2E 테스트
- **성능 회귀 테스트** - 배포 전 성능 검증
- **자동 배포** - PR 머지 시 자동 배포
- **A/B 테스트** - 실제 사용자 대상 성능 비교

### 3. 모니터링 및 분석
- **에러 추적** - Sentry 연동
- **사용자 행동 분석** - Google Analytics 4
- **성능 추세 분석** - 시간에 따른 성능 변화 추적
- **알람 시스템** - 성능 임계값 도달 시 알림

## 보안 요구사항

### 1. 데이터 보안
- **HTTPS 강제** - 모든 통신 암호화
- **API 보안** - 인증/인가 시스템
- **입력값 검증** - XSS, CSRF 방지
- **환경변수 관리** - 민감 정보 보호

### 2. 성능 보안
- **DDoS 방지** - Vercel의 기본 보호 활용
- **리소스 제한** - API 호출 제한
- **콘텐츠 보안 정책** - CSP 헤더 설정

## 운영 요구사항

### 1. 배포 및 운영
- **무중단 배포** - 블루/그린 배포 전략
- **롤백 지원** - 문제 발생 시 즉시 이전 버전으로 복구
- **환경 분리** - 개발, 스테이징, 프로덕션 환경
- **로그 관리** - 구조화된 로그 수집 및 분석

### 2. 문서화
- **아키텍처 문서** - 시스템 구조 및 설계 원칙
- **API 문서** - 각 API 엔드포인트 명세
- **배포 가이드** - 배포 프로세스 및 운영 가이드
- **트러블슈팅** - 일반적인 문제 해결 방법

## 성공 지표

### 1. 성능 개선 지표
- **로딩 시간 단축**: 50% 이상 개선
- **번들 크기 감소**: 30% 이상 감소
- **사용자 체험 점수**: Lighthouse 점수 90점 이상

### 2. 개발 효율성 지표
- **빌드 시간 단축**: 모노레포 최적화로 빌드 시간 단축
- **코드 재사용성**: 공통 컴포넌트 80% 이상 재사용
- **개발 생산성**: 새로운 기능 개발 시간 단축
